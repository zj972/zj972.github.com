<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[fmt.Printf初学]]></title>
    <url>%2F2018%2F03%2F27%2Ffmt-Printf%E5%88%9D%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[Emmmm…好吧，对于一个学了好几年JavaScript，而从来没有接触过后台的菜鸡，我对来吧，列举下一些常见的格式化输出...| General | ||:--------|:---|| %v | 以默认的方式打印变量的值 || %T | 打印变量的类型 || Integer | ||:--------|:---|| %+d | 带符号的整型，```fmt.Printf(&quot;%+d&quot;, 255)```输出```+255``` || %q | 打印单引号 || %o | 不带零的八进制 || %#o | 带零的八进制 || %x | 小写的十六进制 || %X | 大写的十六进制 || %#x | 带0x的十六进制 || %U | 打印Unicode字符 || %#U | 打印带字符的Unicode || %b | 打印整型的二进制 || Integer width | ||:--------|:---|| %5d | 表示该整型最大长度是5 |```go fmt.Printf(&quot;|%5d|&quot;, 1) //| 1| fmt.Printf(&quot;|%5d|&quot;, 1234567) //|1234567| 续 %-5d 则相反，打印结果会自动左对齐 %05d 会在数字前面补零 Float %f(=%.6f) 6位小数点 %e(=%.6e) 6位小数点（科学计数法） %g 用最少的数字来表示 %.3g 最多3位数字来表示 %.3f 最多3位小数来表示 String %s 正常输出字符串 %q 字符串带双引号，字符串中的引号带转义符 %#q 字符串带反引号，如果字符串内有反引号，就用双引号代替 %x 将字符串转换为小写的16进制格式 %X 将字符串转换为大写的16进制格式 % x 带空格的16进制格式 String Width %5s 最小宽度为5 %-5s 最小宽度为5（左对齐） %.5s 最大宽度为5 %5.7s 最小宽度为5，最大宽度为7 %-5.7s 最小宽度为5，最大宽度为7（左对齐） %5.3s 如果宽度大于3，则截断 %05s 如果宽度小于5，就会在字符串前面补零 Struct %v 正常打印。比如：{sam {12345 67890}} %+v 带字段名称。比如：{name:sam phone:{mobile:12345 office:67890} %#v 用Go的语法打印，比如main.People{name:”sam”, phone:main.Phone{mobile:”12345”, office:”67890”}} Boolean %t 打印true或false Pointer %p 带0x的指针 %#p 不带0x的指针]]></content>
      <categories>
        <category>《Go语言编程》笔记</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纪念我人生的第一次转岗]]></title>
    <url>%2F2018%2F03%2F22%2F%E5%89%8D%E7%AB%AF%E8%BD%AC%E5%90%8E%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[今天做了一个重大的决定，那就是前端转后台，从JavaScript到Golang。垫显示器的书将要永远垫着了… 虽然作抉择的时候彻夜难眠，但确实没有焦虑，而是在认真的一点一点地剖析两个方向、两个选择的结果。很多很多的因素，自己很难捋清楚，问了很多人，得到了各种建议，但最后将要做决定的时候，才发现还是要问自己才行。 入职培训我一直记得一句话叫做：“简单相信”，但真的让自己做选择时，相信别人的安排又是那么困难。 在面临一些重要决定时，我总是会想到父亲，在我眼里，父亲是一个活得很明白，生活阅历丰富的人。他的建议对我的人生轨迹有着很大的助力作用。父亲觉得年轻就是要多学多闯，要看得见远方，舍弃当下看似很难以割舍的东西，去追求长远的目标。 有人说：只有有能力的人才拥有选择权。但我认为有能力的人拥有的不是选择权，而是制造选择的能力。 END]]></content>
      <categories>
        <category>人生纪实</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo中Next主题首页不显示全文]]></title>
    <url>%2F2018%2F03%2F14%2FHexo%E4%B8%ADNext%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%85%A8%E6%96%87%2F</url>
    <content type="text"><![CDATA[使用Next主题时，会发现它在首页默认是会显示全文的，这就很不方便浏览文章列表。 解决办法找到主题配置文件```yml# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: fales length: 150 将enable的值修改为true，而length是指显示的字数，然后重新部署就可以了~ Tips：使用预览会忽略文章的格式，直接显示为正文文本。 END]]></content>
      <categories>
        <category>编程人生</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>hexo-theme</tag>
        <tag>theme-next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cookie安全探索]]></title>
    <url>%2F2018%2F03%2F14%2FCookie%E5%AE%89%E5%85%A8%E6%8E%A2%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[在使用前端保存数据时，我通常会使用LocalStorage，相较于Cookie，前者更方便，容量更大，而且保存时间长。但是对于后端来说，我们同样需要在前端保存一些数据并与之交互，也就是在HTTP头中携带Cookie。 Cookie的基本属性 name（名称） value（值） domain（子域） path（站点路径） expires/Max-Age（过期时间） Size（大小） http（仅HTTP读取） secure（安全性） 具体的属性用法，网上都有介绍，就不一一赘述 Cookie安全问题 不唯一：Cookie是由三元组[name, domain, path]来确定的，是会出现重名，即不是唯一的 易于获取：前面提到了Cookie是被携带在HTTP上面的，所以很容易从请求上截取到Cookie Cookie注入：容易截取的同时，Cookie也易于修改 思考基于上面的问题，我有思考过当前我所做的项目存在的安全问题，虽然只是一个内部的管理页面，有内网限制。但公司员工如果发现安全漏洞，岂不是可以攻击系统了。 看了很多相关的博文，对我当前项目的Cookie进行了一些基础的防护： 将一些较为敏感的信息作为post请求字段进行传递 对系统的用户输入提交进行脚本过滤 设置secure为true 设置HTTPOnly属性 定期自动清理一些不必要的Cookie字段 END]]></content>
      <categories>
        <category>编程人生</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git子模块-初遇]]></title>
    <url>%2F2018%2F03%2F05%2FGit%E5%AD%90%E6%A8%A1%E5%9D%97-%E5%88%9D%E9%81%87%2F</url>
    <content type="text"><![CDATA[使用Git已经有好几年了，但是从来没有使用过Git的子模块，因为大多数项目都是独立的，项目之间并没有包含关系。所谓子模块，也就是将一个Git仓库作为另一个Git仓库的子目录，然后在大的仓库里进行模块化管理子仓库。 问题初探在搭建Blog的过程中，有使用到Hexo的主题next，在提交代码到Git上时，发现next文件无法commit： $ git statusOn branch masterYour branch is up-to-date with 'origin/master'.Changes not staged for commit: (use "git add &lt;file&gt;..." to update what will be committed) (use "git checkout -- &lt;file&gt;..." to discard changes in working directory) (commit or discard the untracked or modified content in submodules) modified: themes/next (modified content)no changes added to commit (use "git add" and/or "git commit -a") 看了一下网上的解释，原来是因为我是clone的代码，next文件下有.git的存在，只需要删除就可以。删除虽然可以解决问题，但这样就无法更新next了，如果下载后手动合并自己的修改又过于麻烦。而且由于我是深度修改了next，很多文件都进行了修改，所以无法像issues那样，提取个人的配置，不对next进行修改。 子模块使用这时候看到有人提到了fork+submodule的方法，大概意思就是将next项目fork到自己的GitHub上，然后clone下来并作为子模块进行管理，这样既可以修改next并上传保存，也可以update作者的代码。 操作步骤先clone并建立子模块 $ git submodule add https://github.com/zj972/hexo-theme-next themes/next 进行完这一步操作就会clone仓库代码到对应路径，同时还会在根目录下生成一个.gitmodules文件，该配置文件保存着仓库链接和本地目录的映射关系： $ cat .gitmodules[submodule "themes/next"] path = themes/next url = https://github.com/zj972/hexo-theme-next 然后就可以进行子模块的修改和操作了，作为刚用上这个命令不太熟的，其实可以直接进入到子仓库目录下进行git操作。 一下是几条操作的示例： 查看详细的差异信息 $ git diff --cached --submodule 克隆包含有子模块的项目 $ git clone git@github.com:zj972/blog.git 这个时候子模块目录是空的，需要通过submodule进行更新 $ git submodule init$ git submodule update 其他的子模块操作还在尝试中… END]]></content>
      <categories>
        <category>编程人生</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub Page绑定个人域名]]></title>
    <url>%2F2018%2F03%2F02%2FGitHub_Page%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[自己的服务器到期了，然后打算在GitHub上面搭个个人博客玩玩，最后选择了Hexo。搭建起来后，用自己的域名绑定了GitHub Page。 但是遇到一个问题：每次hexo d -g之后，访问www.yangshaobo.cn就变成了404。DNS解析是正常的，打开项目的setting，却发现Custom domain的值为空。 发现问题原来当你添加个人域名时，GitHub会向你的项目仓库添加一个文件CNAME，里面包含了一个域名： www.yangshaobo.cn 而每次我使用通过Hexo部署时都会自动提交public文件夹到仓库里，配置信息如下： deploy: type: git repository: git@github.com:zj972/zj972.github.com.git branch: master 这样就把CNAME文件自动覆盖了。 解决方案解决办法就是把CNAME文件添加到source文件夹里，这样每次部署就不会覆盖掉了。 END]]></content>
      <categories>
        <category>编程人生</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
